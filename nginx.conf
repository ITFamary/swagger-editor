worker_processes      1;

events {
  worker_connections  1024;
}

http {
  include             mime.types;
  default_type        application/octet-stream;

  sendfile on;

  keepalive_timeout   65;

  server {
    listen            8080;
    server_name       localhost;

    location / {
      root            /usr/share/nginx/html;
      index           index.html index.htm;
      if ($request_method = 'OPTIONS') {
          add_header 'Access-Control-Allow-Origin' '*';
          add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
          #
          # Custom headers and headers various browsers *should* be OK with but aren't
          #
          add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
          #
          # Tell client that this pre-flight info is valid for 20 days
          #
          add_header 'Access-Control-Max-Age' 1728000;
          add_header 'Content-Type' 'text/plain charset=UTF-8';
          add_header 'Content-Length' 0;
          return 204;
      }
      if ($request_method = 'POST') {
          add_header 'Access-Control-Allow-Origin' '*';
          add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
          add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
      }
      if ($request_method = 'GET') {
          add_header 'Access-Control-Allow-Origin' '*';
          add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
          add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
      }

      # fallback support
      # set_by_lua $uri_lowercase "return string.lower(ngx.var.uri)";
      error_page 404      /index.html;

      # try_files $uri $uri/ index.html;
    }

    # error_page 400 404      /404.html;
    # error_page 500 502 504  /500.html;
    # error_page 503          /503.html;

    # recursive_error_pages   on;

    # location ~* ^/(404\.html|500\.html|503\.html)$ {
    #   log_not_found off;
    #   error_page 404 = @default;
    # }

    # location @default {
    #   log_not_found on;
    #   root /usr/share/nginx/html;
    # }
    # fallback support
    # error_page   404 /404.html;
    # location = /404.html {
    #   root /usr/share/nginx/html;
    # }
  }
}
